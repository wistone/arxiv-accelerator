name: 自动备份日志分析文件

on:
  schedule:
    # 每1小时执行一次备份 (UTC时间)
    - cron: '0 */1 * * *'
  
  # 允许手动触发
  workflow_dispatch:
    inputs:
      debug:
        description: '启用调试模式'
        required: false
        default: 'false'
        type: boolean

jobs:
  backup-logs:
    runs-on: ubuntu-latest
    name: 备份分析文件到Git
    
    steps:
      - name: 🔍 检查仓库环境
        run: |
          echo "📊 GitHub Actions环境信息:"
          echo "   - 仓库: ${{ github.repository }}"
          echo "   - 分支: ${{ github.ref_name }}"
          echo "   - 触发事件: ${{ github.event_name }}"
          echo "   - 工作流: ${{ github.workflow }}"
          echo "   - 运行ID: ${{ github.run_id }}"

      - name: 🔐 验证密钥配置
        run: |
          if [ -z "${{ secrets.BACKUP_SECRET }}" ]; then
            echo "❌ 错误: BACKUP_SECRET未配置"
            echo "💡 请在仓库Settings → Secrets中添加BACKUP_SECRET密钥"
            exit 1
          fi
          echo "✅ 备份密钥已配置"

      - name: 📥 Checkout 仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 配置 Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: 🌐 获取Render服务器的文件
        id: get_files
        run: |
          echo "🚀 开始从Render获取分析文件..."
          
          # 计算HMAC签名
          SIGNATURE=$(echo -n "run" | openssl dgst -sha256 -hmac "${{ secrets.BACKUP_SECRET }}" | cut -d' ' -f2)
          echo "🔐 签名已生成"
          
          # 设置调试模式
          if [ "${{ github.event.inputs.debug }}" = "true" ]; then
            echo "🐛 调试模式已启用"
            CURL_OPTIONS="-v"
          else
            CURL_OPTIONS="-s"
          fi
          
          # 调用备份API获取文件
          echo "📡 调用备份API..."
          RESPONSE=$(curl -X POST \
            -H "X-Backup-Sign: $SIGNATURE" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Backup-Bot/1.0" \
            $CURL_OPTIONS \
            -w "HTTP_STATUS:%{http_code}" \
            https://arxiv-accelerator.onrender.com/internal/backup)
          
          # 解析响应
          HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
          
          echo "📊 API响应状态: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ 成功获取文件列表!"
            
            # 保存响应到文件
            echo "$RESPONSE_BODY" > backup_response.json
            
            # 解析文件数量
            FILE_COUNT=$(echo "$RESPONSE_BODY" | jq -r '.file_count // 0')
            echo "📄 文件数量: $FILE_COUNT"
            
            if [ "$FILE_COUNT" -gt 0 ]; then
              echo "has_files=true" >> $GITHUB_OUTPUT
              echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
            else
              echo "has_files=false" >> $GITHUB_OUTPUT
              echo "ℹ️  没有需要备份的文件"
            fi
          else
            echo "❌ 获取文件失败!"
            echo "📄 错误响应: $RESPONSE_BODY"
            
            # 根据状态码提供具体的错误信息
            case $HTTP_STATUS in
              403)
                echo "💡 签名验证失败，请检查BACKUP_SECRET密钥是否正确"
                ;;
              404)
                echo "💡 备份API端点不存在，请确认服务器部署正常"
                ;;
              500)
                echo "💡 服务器内部错误，请检查Render服务日志"
                ;;
              000)
                echo "💡 无法连接到服务器，可能服务器正在睡眠状态"
                echo "🔄 尝试再次调用以唤醒服务..."
                sleep 10
                # 重试一次
                RETRY_RESPONSE=$(curl -X POST \
                  -H "X-Backup-Sign: $SIGNATURE" \
                  -H "Content-Type: application/json" \
                  $CURL_OPTIONS \
                  -w "HTTP_STATUS:%{http_code}" \
                  https://arxiv-accelerator.onrender.com/internal/backup)
                
                RETRY_STATUS=$(echo "$RETRY_RESPONSE" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
                if [ "$RETRY_STATUS" = "200" ]; then
                  echo "✅ 重试成功!"
                  RETRY_BODY=$(echo "$RETRY_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
                  echo "$RETRY_BODY" > backup_response.json
                  FILE_COUNT=$(echo "$RETRY_BODY" | jq -r '.file_count // 0')
                  if [ "$FILE_COUNT" -gt 0 ]; then
                    echo "has_files=true" >> $GITHUB_OUTPUT
                    echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
                  else
                    echo "has_files=false" >> $GITHUB_OUTPUT
                  fi
                else
                  echo "❌ 重试也失败了"
                  exit 1
                fi
                ;;
            esac
            
            if [ "$HTTP_STATUS" != "000" ]; then
              exit 1
            fi
          fi

      - name: 📝 写入文件到仓库
        if: steps.get_files.outputs.has_files == 'true'
        run: |
          echo "📝 开始写入文件到仓库..."
          
          # 确保log目录存在
          mkdir -p log
          
          # 使用Python脚本处理JSON并写入文件
          python3 -c "
          import json
          import os
          
          # 读取API响应
          with open('backup_response.json', 'r', encoding='utf-8') as f:
              data = json.load(f)
          
          if not data.get('ok', False):
              print('❌ API响应表示操作失败')
              exit(1)
          
          files = data.get('files', {})
          if not files:
              print('ℹ️  没有文件需要写入')
              exit(0)
          
          # 写入每个文件
          for filename, file_info in files.items():
              filepath = file_info['path']
              content = file_info['content']
              
              # 确保目录存在
              os.makedirs(os.path.dirname(filepath), exist_ok=True)
              
              # 写入文件
              with open(filepath, 'w', encoding='utf-8') as f:
                  f.write(content)
              
              print(f'✅ 写入文件: {filepath} ({file_info[\"size\"]} 字符)')
          
          print(f'🎉 成功写入 {len(files)} 个文件')
          "

      - name: 🔍 检查Git变更
        if: steps.get_files.outputs.has_files == 'true'
        id: check_changes
        run: |
          # 检查是否有变更
          if git diff --quiet && git diff --cached --quiet; then
            echo "ℹ️  没有文件变更，无需提交"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "📝 检测到文件变更"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # 显示变更的文件
            echo "📋 变更的文件:"
            git status --porcelain
          fi

      - name: 💾 提交并推送变更
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "💾 提交文件变更..."
          
          # 添加所有log目录的分析文件
          git add log/*-analysis*.md
          
          # 生成提交信息
          COMMIT_MESSAGE="Log: Auto Update $(date '+%Y-%m-%d %H:%M:%S')"
          echo "📝 提交信息: $COMMIT_MESSAGE"
          
          # 提交
          git commit -m "$COMMIT_MESSAGE"
          
          # 推送
          echo "📤 推送到远程仓库..."
          git push origin main
          
          echo "✅ 备份提交推送成功!"

      - name: 📊 备份统计
        if: always()
        run: |
          echo "🎉 自动备份任务完成!"
          echo "📈 统计信息:"
          echo "   - 执行时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "   - 北京时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S CST')"
          echo "   - 文件数量: ${{ steps.get_files.outputs.file_count || '0' }}"
          echo "   - 是否有变更: ${{ steps.check_changes.outputs.has_changes || 'false' }}"
          echo "   - 下次执行: 1小时后"
          echo "   - 备份方式: Render API → GitHub Actions Git"

      - name: 🧹 清理临时文件
        if: always()
        run: |
          rm -f backup_response.json